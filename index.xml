<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Remco Docs</title>
    <link>https://heavyhorst.github.io/remco/index.xml</link>
    <description>Recent content on Remco Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Wed, 05 Oct 2016 17:33:14 +0200</lastBuildDate>
    <atom:link href="https://heavyhorst.github.io/remco/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Templates</title>
      <link>https://heavyhorst.github.io/remco/template/</link>
      <pubDate>Wed, 05 Oct 2016 17:33:14 +0200</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/template/</guid>
      <description>

&lt;p&gt;Templates are written in flosch&amp;rsquo;s &lt;a href=&#34;https://github.com/flosch/pongo2&#34;&gt;&lt;code&gt;pongo2&lt;/code&gt;&lt;/a&gt; template engine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a documentation on how the templating language works you can &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/templates/&#34;&gt;head over to the Django documentation&lt;/a&gt;. pongo2 aims to be compatible with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;template-functions&#34;&gt;Template Functions&lt;/h2&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;exists&lt;/strong&gt; &amp;ndash; Checks if the key exists. Return false if key is not found.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if exists(&amp;quot;/key&amp;quot;) %}
    value: {{ getv (&amp;quot;/key&amp;quot;) }}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;get&lt;/strong&gt; &amp;ndash; Returns the KVPair where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% with get(&amp;quot;/key&amp;quot;) as dat %}
    key: {{dat.Key}}
    value: {{dat.Value}}
{% endwith %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;gets&lt;/strong&gt; &amp;ndash; Returns all KVPair, []KVPair, where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in gets(&amp;quot;/*&amp;quot;) %}
    key: {{i.Key}}
    value: {{i.Value}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getv&lt;/strong&gt; &amp;ndash; Returns the value as a string where key matches its argument or an optional default value.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;value: {{ getv(&amp;quot;/key&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;with-a-default-value&#34;&gt;With a default value&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;value: {{ getv(&amp;quot;/key&amp;quot;, &amp;quot;default_value&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getvs&lt;/strong&gt; &amp;ndash; Returns all values, []string, where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for value in getvs(&amp;quot;/*&amp;quot;) %}
    value: {{value}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getenv&lt;/strong&gt; &amp;ndash; Retrieves the value of the environment variable named by the key. It returns the value, which will be empty if the variable is not present. Optionally, you can give a default value that will be returned if the key is not present. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HOSTNAME=`hostname`
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;hostname: {{getenv(&amp;quot;HOSTNAME&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;with-a-default-value-1&#34;&gt;With a default value&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;ipaddr: {{ getenv(&amp;quot;HOST_IP&amp;quot;, &amp;quot;127.0.0.1&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;ls&lt;/strong&gt; &amp;ndash; Returns all subkeys, []string, where path matches its argument. Returns an empty list if path is not found. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in ls(&amp;quot;/deis/services&amp;quot;) %}
   value: {{i}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;lsdir&lt;/strong&gt; &amp;ndash; Returns all subkeys, []string, where path matches its argument. It only returns subkeys that also have subkeys. Returns an empty list if path is not found. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for dir in lsdir(&amp;quot;/deis/services&amp;quot;) %}
   value: {{dir}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;replace&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Replace&#34;&gt;strings.Replace&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;backend = {{ replace(getv(&amp;quot;/services/backend/nginx&amp;quot;), &amp;quot;-&amp;quot;, &amp;quot;_&amp;quot;, -1) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;contains&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Contains&#34;&gt;strings.Contains&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if contains(getv(&amp;quot;/services/backend/nginx&amp;quot;), &amp;quot;something&amp;quot;) %}
something
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;printf&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/fmt/#Sprintf&#34;&gt;fmt.Sprintf&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ getv (printf (&amp;quot;/config/%s/host_port&amp;quot;, dir)) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;h2 id=&#34;template-filters&#34;&gt;Template Filters&lt;/h2&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;base64&lt;/strong&gt; &amp;ndash; Encodes a string as base64 &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;somestring&amp;quot; | base64}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;base&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/path/#Base&#34;&gt;path.Base&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;/home/user/test&amp;quot; | base }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;dir&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/path/#Dir&#34;&gt;path.Dir&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;/home/user/test&amp;quot; | dir }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;split&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Split&#34;&gt;strings.Split&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in (&amp;quot;/home/user/test&amp;quot; | split:&amp;quot;/&amp;quot;) %}
{{i}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;parseJSON&lt;/strong&gt; &amp;ndash; Returns an map[string]interface{} of the json value.&lt;/summary&gt;
&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;parseJSONArray&lt;/strong&gt; &amp;ndash; Returns a []interface{} from a json array. &lt;/summary&gt;
&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toJSON&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into an JSON object. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toJson}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toPrettyJSON&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into an pretty-printed JSON object, indented by four spaces. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toPrettyJson}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toYAML&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into a YAML string. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toJson}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;sortByLength&lt;/strong&gt; - Returns the sorted array. &lt;/summary&gt;&lt;/p&gt;

&lt;p&gt;Works with []string and []KVPair.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for dir in lsdir(&amp;quot;/config&amp;quot;) | sortByLength %}
{{dir}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;reverse&lt;/strong&gt; &amp;ndash; Returns the reversed array. &lt;/summary&gt;&lt;/p&gt;

&lt;p&gt;Works with []string and []KVPair.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for dir in lsdir(&amp;quot;/config&amp;quot;) | sortByLength | reverse %}
{{dir}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;decrypt&lt;/strong&gt; &amp;ndash; Decrypts the stored data. Data must follow the following format, &lt;code&gt;base64(gpg(gzip(data)))&lt;/code&gt;. &lt;/summary&gt;&lt;/p&gt;

&lt;p&gt;This is compatible with &lt;a href=&#34;https://github.com/xordataexchange/crypt/tree/master/bin/crypt&#34;&gt;crypt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Works with string, []string, KVPair, KVPairs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ getv(&amp;quot;/test/data&amp;quot;) | decrypt:&amp;quot;/path/to/your/armored/private/key&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;storing-data-using-gpg&#34;&gt;Storing data using gpg&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;data = `echo &#39;secret text&#39; | gzip -c | gpg2 --compress-level 0 --encrypt --default-recipient &amp;lt;your-recipient&amp;gt; | base64`
ETCDCTL_API=3 etcdctl put /test/data $data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring remco</title>
      <link>https://heavyhorst.github.io/remco/config/</link>
      <pubDate>Wed, 05 Oct 2016 17:24:57 +0200</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/config/</guid>
      <description>

&lt;p&gt;The configuration file is in TOML format.&lt;br&gt;
TOML looks very similar to INI configuration formats, but with slightly more rich data structures and nesting support.&lt;/p&gt;

&lt;h2 id=&#34;using-environment-variables&#34;&gt;Using Environment Variables&lt;/h2&gt;

&lt;p&gt;If you wish to use environmental variables in your config files as a way
to configure values, you can simply use $VARIABLE_NAME or ${VARIABLE_NAME} and the text will be replaced with the value of the environmental variable VARIABLE_NAME.&lt;/p&gt;

&lt;h2 id=&#34;global-configuration-options&#34;&gt;Global configuration options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;log_level(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Valid levels are panic, fatal, error, warn, info and debug. Default is info.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log_format(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The format of the log messages. Valid formats are &lt;em&gt;text&lt;/em&gt; and &lt;em&gt;json&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;template-configuration-options&#34;&gt;Template configuration options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;src(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The path of the template that will be used to render the application&amp;rsquo;s configuration file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dst(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The location to place the rendered configuration file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;checkCmd(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The command to check config. Use {{.src}} to reference the rendered source template.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reloadCmd(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The command to reload config.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mode(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The permission mode of the file. Default is &amp;ldquo;0644&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UID(int, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The UID that should own the file. Defaults to the effective uid.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GID(int, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The GID that should own the file. Defaults to the effective gid.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;backend-configuration-options&#34;&gt;Backend configuration options&lt;/h2&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;valid in every backend&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;watch(bool, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Enable watch support. Default is false.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prefix(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Key path prefix. Default is &amp;ldquo;&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interval(int):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The backend polling interval. Only used when watch mode is disabled.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onetime(bool, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Render the config file and quit. Only used when watch mode is disabled. Default is false.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keys([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The backend keys that the template requires to be rendered correctly. The child keys are also loaded.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;etcd&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nodes([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List of backend nodes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_cert(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client cert file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_key(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client key file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_ca_keys(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client CA key file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The username for the basic_auth authentication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The password for the basic_auth authentication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version(uint, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The etcd api-level to use (2 or 3). Default is 2.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;consul&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nodes([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List of backend nodes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scheme(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;the backend URI scheme (http or https).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_cert(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client cert file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_key(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client key file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_ca_keys(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client CA key file.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;file&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;filepath(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The filepath to a yaml or json file containing the key-value pairs.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;redis&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nodes([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List of backend nodes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The redis password.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;vault&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;node(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The backend node.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auth_type(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault authentication type. (token, approle, app-id, userpass, github)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auth_token(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault authentication token. Only used with auth_type=token or github.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app_role(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault app role. Only used with auth_type=approle.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;secret_id(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault secret id. Only used with auth_type=approle.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app_id(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault app ID. Only used with auth_type=app-id.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user_id(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault user ID. Only used with auth_type=app-id.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The username for the userpass authentication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The password for the userpass authentication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_cert(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client cert file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_key(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client key file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_ca_keys(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client CA key file.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;env&lt;/strong&gt; &lt;/summary&gt;
&lt;/details&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sample configuration file</title>
      <link>https://heavyhorst.github.io/remco/config/sample/</link>
      <pubDate>Wed, 05 Oct 2016 17:24:57 +0200</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/config/sample/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#remco.toml
################################################################
# Global configuration
################################################################
log_level = &amp;quot;debug&amp;quot;
log_format = &amp;quot;text&amp;quot;


################################################################
# Resource configuration
################################################################
[[resource]]
  [[resource.template]]
    src = &amp;quot;/etc/confd/templates/test.cfg&amp;quot;
    dst = &amp;quot;/home/rkaufmann/haproxy.cfg&amp;quot;
    checkCmd = &amp;quot;&amp;quot;
    reloadCmd = &amp;quot;&amp;quot;
    mode = &amp;quot;0644&amp;quot;

  [resource.backend]
    [resource.backend.etcd]
      nodes = [&amp;quot;127.0.0.1:2379&amp;quot;]
      client_cert = &amp;quot;/path/to/client_cert&amp;quot;
      client_key = &amp;quot;/path/to/client_key&amp;quot;
      client_ca_keys = &amp;quot;/path/to/client_ca_keys&amp;quot;
      username = &amp;quot;admin&amp;quot;
      password = &amp;quot;p@SsWord&amp;quot;
      version = 3

      # These values are valid in every backend
      watch = true
      prefix = &amp;quot;/&amp;quot;
      onetime = true
      interval = 1
      keys = [&amp;quot;/&amp;quot;]

    [resource.backend.file]
      filepath = &amp;quot;/etc/remco/test.yml&amp;quot;

    [resource.backend.consul]
      nodes = [&amp;quot;127.0.0.1:8500&amp;quot;]
      scheme = &amp;quot;http&amp;quot; #{http/https}
      client_cert = &amp;quot;/path/to/client_cert&amp;quot;
      client_key = &amp;quot;/path/to/client_key&amp;quot;
      client_ca_keys = &amp;quot;/path/to/client_ca_keys&amp;quot;
    
    [resource.backend.vault]
      node = &amp;quot;http://127.0.0.1:8200&amp;quot;
      ## Token based auth backend
      auth_type = &amp;quot;token&amp;quot;
      auth_token = &amp;quot;vault_token&amp;quot;
      ## AppID based auth backend
      # auth_type = &amp;quot;app-id&amp;quot;
      # app_id = &amp;quot;vault_app_id&amp;quot;
      # user_id = &amp;quot;vault_user_id&amp;quot;
      ## userpass based auth backend
      # auth_type = &amp;quot;userpass&amp;quot;
      # username = &amp;quot;username&amp;quot;
      # password = &amp;quot;password&amp;quot;
      client_cert = &amp;quot;/path/to/client_cert&amp;quot;
      client_key = &amp;quot;/path/to/client_key&amp;quot;
      client_ca_keys = &amp;quot;/path/to/client_ca_keys&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LICENCE</title>
      <link>https://heavyhorst.github.io/remco/license/</link>
      <pubDate>Wed, 05 Oct 2016 17:11:10 +0200</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/license/</guid>
      <description>&lt;pre&gt;
Copyright © 2013 Kelsey Hightower
Copyright © 2016 The Remco Authors

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the &#34;Software&#34;), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>