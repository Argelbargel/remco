<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Remco Docs</title>
    <link>https://heavyhorst.github.io/remco/index.xml</link>
    <description>Recent content on Remco Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 06 Nov 2016 17:24:57 +0200</lastBuildDate>
    <atom:link href="https://heavyhorst.github.io/remco/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Sample resource file</title>
      <link>https://heavyhorst.github.io/remco/config/sampleresource/</link>
      <pubDate>Sun, 06 Nov 2016 17:24:57 +0200</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/config/sampleresource/</guid>
      <description>&lt;pre&gt;&lt;code&gt;[exec]
  command       = &amp;quot;/path/to/program&amp;quot;
  kill_signal   = &amp;quot;SIGTERM&amp;quot;
  reload_signal = &amp;quot;SIGHUP&amp;quot;
  kill_timeout  = 10
  splay         = 10


[[template]]
  src           = &amp;quot;/etc/remco/templates/haproxy.cfg&amp;quot;
  dst           = &amp;quot;/etc/haproxy/haproxy.cfg&amp;quot;
  reload_cmd 	= &amp;quot;haproxy -f /etc/haproxy/haproxy.cfg -p /var/run/haproxy.pid -D -sf `cat /var/run/haproxy.pid`&amp;quot;
  mode          = &amp;quot;0644&amp;quot;

[backend]
  [backend.etcd]
    nodes    = [&amp;quot;http://localhost:2379&amp;quot;]
    keys     = [&amp;quot;/service-registry&amp;quot;]
    watch    = true
    interval = 60
    version  = 3

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>https://heavyhorst.github.io/remco/template/</link>
      <pubDate>Wed, 05 Oct 2016 17:33:14 +0200</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/template/</guid>
      <description>

&lt;p&gt;Templates are written in flosch&amp;rsquo;s &lt;a href=&#34;https://github.com/flosch/pongo2&#34;&gt;&lt;code&gt;pongo2&lt;/code&gt;&lt;/a&gt; template engine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a documentation on how the templating language works you can &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/templates/&#34;&gt;head over to the Django documentation&lt;/a&gt;. pongo2 aims to be compatible with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;template-functions&#34;&gt;Template Functions&lt;/h2&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;exists&lt;/strong&gt; &amp;ndash; Checks if the key exists. Return false if key is not found.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if exists(&amp;quot;/key&amp;quot;) %}
    value: {{ getv (&amp;quot;/key&amp;quot;) }}
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;get&lt;/strong&gt; &amp;ndash; Returns the KVPair where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% with get(&amp;quot;/key&amp;quot;) as dat %}
    key: {{dat.Key}}
    value: {{dat.Value}}
{% endwith %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;gets&lt;/strong&gt; &amp;ndash; Returns all KVPair, []KVPair, where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in gets(&amp;quot;/*&amp;quot;) %}
    key: {{i.Key}}
    value: {{i.Value}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getv&lt;/strong&gt; &amp;ndash; Returns the value as a string where key matches its argument or an optional default value.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;value: {{ getv(&amp;quot;/key&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;with-a-default-value&#34;&gt;With a default value&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;value: {{ getv(&amp;quot;/key&amp;quot;, &amp;quot;default_value&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getvs&lt;/strong&gt; &amp;ndash; Returns all values, []string, where key matches its argument.&lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for value in getvs(&amp;quot;/*&amp;quot;) %}
    value: {{value}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;getenv&lt;/strong&gt; &amp;ndash; Retrieves the value of the environment variable named by the key. It returns the value, which will be empty if the variable is not present. Optionally, you can give a default value that will be returned if the key is not present. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HOSTNAME=`hostname`
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;hostname: {{getenv(&amp;quot;HOSTNAME&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;with-a-default-value-1&#34;&gt;With a default value&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;ipaddr: {{ getenv(&amp;quot;HOST_IP&amp;quot;, &amp;quot;127.0.0.1&amp;quot;) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;ls&lt;/strong&gt; &amp;ndash; Returns all subkeys, []string, where path matches its argument. Returns an empty list if path is not found. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in ls(&amp;quot;/deis/services&amp;quot;) %}
   value: {{i}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;lsdir&lt;/strong&gt; &amp;ndash; Returns all subkeys, []string, where path matches its argument. It only returns subkeys that also have subkeys. Returns an empty list if path is not found. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for dir in lsdir(&amp;quot;/deis/services&amp;quot;) %}
   value: {{dir}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;replace&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Replace&#34;&gt;strings.Replace&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;backend = {{ replace(getv(&amp;quot;/services/backend/nginx&amp;quot;), &amp;quot;-&amp;quot;, &amp;quot;_&amp;quot;, -1) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;contains&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Contains&#34;&gt;strings.Contains&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% if contains(getv(&amp;quot;/services/backend/nginx&amp;quot;), &amp;quot;something&amp;quot;) %}
something
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;printf&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/fmt/#Sprintf&#34;&gt;fmt.Sprintf&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ getv (printf (&amp;quot;/config/%s/host_port&amp;quot;, dir)) }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;lookupIP&lt;/strong&gt; &amp;ndash; Wrapper for the &lt;a href=&#34;https://golang.org/pkg/net/#LookupIP&#34;&gt;net.LookupIP&lt;/a&gt; function. The wrapper returns the IP addresses in alphabetical order. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for ip in lookupIP(&amp;quot;kube-master&amp;quot;) %}
 {{ ip }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;lookupSRV&lt;/strong&gt; &amp;ndash; Wrapper for the &lt;a href=&#34;https://golang.org/pkg/net/#LookupSRV&#34;&gt;net.LookupSRV&lt;/a&gt; function. The wrapper returns the SRV records in alphabetical order. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for srv in lookupSRV(&amp;quot;xmpp-server&amp;quot;, &amp;quot;tcp&amp;quot;, &amp;quot;google.com&amp;quot;) %}
  target: {{ srv.Target }}
  port: {{ srv.Port }}
  priority: {{ srv.Priority }}
  weight: {{ srv.Weight }}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;h2 id=&#34;template-filters&#34;&gt;Template Filters&lt;/h2&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;base64&lt;/strong&gt; &amp;ndash; Encodes a string as base64 &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;somestring&amp;quot; | base64}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;base&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/path/#Base&#34;&gt;path.Base&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;/home/user/test&amp;quot; | base }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;dir&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/path/#Dir&#34;&gt;path.Dir&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ &amp;quot;/home/user/test&amp;quot; | dir }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;split&lt;/strong&gt; &amp;ndash; Alias for the &lt;a href=&#34;https://golang.org/pkg/strings/#Split&#34;&gt;strings.Split&lt;/a&gt; function. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for i in (&amp;quot;/home/user/test&amp;quot; | split:&amp;quot;/&amp;quot;) %}
{{i}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;parseYAML&lt;/strong&gt; &amp;ndash; Returns an interface{} of the yaml/json value.&lt;/summary&gt;
&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toJSON&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into an JSON object. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toJson}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toPrettyJSON&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into an pretty-printed JSON object, indented by four spaces. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toPrettyJson}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;toYAML&lt;/strong&gt; &amp;ndash; Converts data, for example the result of gets or lsdir, into a YAML string. &lt;/summary&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ gets(&amp;quot;/myapp/database/*&amp;quot;) | toJson}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;sortByLength&lt;/strong&gt; - Returns the sorted array. &lt;/summary&gt;&lt;/p&gt;

&lt;p&gt;Works with []string and []KVPair.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% for dir in lsdir(&amp;quot;/config&amp;quot;) | sortByLength %}
{{dir}}
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;decrypt&lt;/strong&gt; &amp;ndash; Decrypts the stored data. Data must follow the following format, &lt;code&gt;base64(gpg(gzip(data)))&lt;/code&gt;. &lt;/summary&gt;&lt;/p&gt;

&lt;p&gt;This is compatible with &lt;a href=&#34;https://github.com/xordataexchange/crypt/tree/master/bin/crypt&#34;&gt;crypt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Works with string, []string, KVPair, KVPairs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ getv(&amp;quot;/test/data&amp;quot;) | decrypt:&amp;quot;/path/to/your/armored/private/key&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;storing-data-using-gpg&#34;&gt;Storing data using gpg&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;data = `echo &#39;secret text&#39; | gzip -c | gpg2 --compress-level 0 --encrypt --default-recipient &amp;lt;your-recipient&amp;gt; | base64`
ETCDCTL_API=3 etcdctl put /test/data $data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sample configuration file</title>
      <link>https://heavyhorst.github.io/remco/config/sample/</link>
      <pubDate>Wed, 05 Oct 2016 17:24:57 +0200</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/config/sample/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#remco.toml
################################################################
# Global configuration
################################################################
log_level   = &amp;quot;debug&amp;quot;
log_format  = &amp;quot;json&amp;quot;
include_dir = &amp;quot;/etc/remco/resource.d/&amp;quot;
pid_file    = &amp;quot;/var/run/remco/remco.pid&amp;quot;
log_file    = &amp;quot;/var/log/remco.log&amp;quot;


################################################################
# Resource configuration
################################################################
[[resource]]
  name = &amp;quot;haproxy&amp;quot;
  [[resource.template]]
    src         = &amp;quot;/etc/remco/templates/haproxy.cfg&amp;quot;
    dst         = &amp;quot;/etc/haproxy/haproxy.cfg&amp;quot;
    check_cmd   = &amp;quot;somecommand&amp;quot;
    reload_cmd  = &amp;quot;somecommand&amp;quot;
    mode        = &amp;quot;0644&amp;quot;

  [resource.backend]
    # you can use as many backends as you like
	# in this example vault and file
    [resource.backend.vault]
      node           = &amp;quot;http://127.0.0.1:8200&amp;quot;
      ## Token based auth backend
      auth_type      = &amp;quot;token&amp;quot;
      auth_token     = &amp;quot;vault_token&amp;quot;
      ## AppID based auth backend
      # auth_type    = &amp;quot;app-id&amp;quot;
      # app_id       = &amp;quot;vault_app_id&amp;quot;
      # user_id      = &amp;quot;vault_user_id&amp;quot;
      ## userpass based auth backend
      # auth_type    = &amp;quot;userpass&amp;quot;
      # username     = &amp;quot;username&amp;quot;
      # password     = &amp;quot;password&amp;quot;
      client_cert    = &amp;quot;/path/to/client_cert&amp;quot;
      client_key     = &amp;quot;/path/to/client_key&amp;quot;
      client_ca_keys = &amp;quot;/path/to/client_ca_keys&amp;quot;
      
	  # These values are valid in every backend
      watch    = true
      prefix   = &amp;quot;/&amp;quot;
      onetime  = true
      interval = 1
      keys     = [&amp;quot;/&amp;quot;]

    [resource.backend.file]
      filepath = &amp;quot;/etc/remco/test.yml&amp;quot;
	  watch    = true
	  keys     = [&amp;quot;/prefix&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>LICENCE</title>
      <link>https://heavyhorst.github.io/remco/license/</link>
      <pubDate>Wed, 05 Oct 2016 17:11:10 +0200</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/license/</guid>
      <description>&lt;pre&gt;
Copyright © 2013 Kelsey Hightower
Copyright © 2016 The Remco Authors

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the &#34;Software&#34;), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Configuring remco</title>
      <link>https://heavyhorst.github.io/remco/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/config/</guid>
      <description>

&lt;p&gt;The configuration file is in TOML format.&lt;br&gt;
TOML looks very similar to INI configuration formats, but with slightly more rich data structures and nesting support.&lt;/p&gt;

&lt;h2 id=&#34;using-environment-variables&#34;&gt;Using Environment Variables&lt;/h2&gt;

&lt;p&gt;If you wish to use environmental variables in your config files as a way
to configure values, you can simply use $VARIABLE_NAME or ${VARIABLE_NAME} and the text will be replaced with the value of the environmental variable VARIABLE_NAME.&lt;/p&gt;

&lt;h2 id=&#34;global-configuration-options&#34;&gt;Global configuration options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;log_level(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Valid levels are panic, fatal, error, warn, info and debug. Default is info.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log_format(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The format of the log messages. Valid formats are &lt;em&gt;text&lt;/em&gt; and &lt;em&gt;json&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;include_dir(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Specify an entire directory of resource configuration files to include.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pid_file(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A filename to write the process-id to.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log_file(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Specify the log file name. The empty string means to log to stdout.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resource-configuration-options&#34;&gt;Resource configuration options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;You can give the resource a name which is added to the logs as field &lt;em&gt;resource&lt;/em&gt;. Default is the name of the resource file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exec-configuration-options&#34;&gt;Exec configuration options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;command(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This is the command to exec as a child process. Note that the child process must remain in the foreground.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kill_signal(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This defines the signal sent to the child process when remco is gracefully shutting down. The application needs to exit before the &lt;code&gt;kill_timeout&lt;/code&gt;,
it will be terminated otherwise (like kill -9). The default value is &amp;ldquo;SIGTERM&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kill_timeout(int):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;the maximum amount of time (seconds) to wait for the child process to gracefully terminate. Default is 10.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reload_signal(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;This defines the signal sent to the child process when some configuration data is changed. If no signal is specified the child process will be killed (gracefully) and started again.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;splay(int):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;A random splay to wait before killing the command. May be useful in large clusters to prevent all child processes to reload at the same time when configuration changes occur. Default is 0.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;template-configuration-options&#34;&gt;Template configuration options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;src(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The path of the template that will be used to render the application&amp;rsquo;s configuration file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dst(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The location to place the rendered configuration file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;check_cmd(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The command to check config. Use {{.src}} to reference the rendered source template.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;reload_cmd(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The command to reload config.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mode(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The permission mode of the file. Default is &amp;ldquo;0644&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UID(int, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The UID that should own the file. Defaults to the effective uid.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GID(int, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The GID that should own the file. Defaults to the effective gid.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;backend-configuration-options&#34;&gt;Backend configuration options&lt;/h2&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;valid in every backend&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;watch(bool, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Enable watch support. Default is false.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prefix(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Key path prefix. Default is &amp;ldquo;&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;interval(int):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The backend polling interval. Can be used as a reconcilation loop for watch or standalone.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;onetime(bool, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Render the config file and quit. Default is false.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keys([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The backend keys that the template requires to be rendered correctly. The child keys are also loaded.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;etcd&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nodes([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List of backend nodes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_cert(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client cert file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_key(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client key file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_ca_keys(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client CA key file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The username for the basic_auth authentication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The password for the basic_auth authentication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;version(uint, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The etcd api-level to use (2 or 3). Default is 2.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;consul&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nodes([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List of backend nodes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scheme(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;the backend URI scheme (http or https).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_cert(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client cert file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_key(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client key file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_ca_keys(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client CA key file.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;file&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;filepath(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The filepath to a yaml or json file containing the key-value pairs.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;redis&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nodes([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List of backend nodes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The redis password.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;database(int, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The redis database.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;vault&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;node(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The backend node.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auth_type(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault authentication type. (token, approle, app-id, userpass, github)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;auth_token(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault authentication token. Only used with auth_type=token or github.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app_role(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault app role. Only used with auth_type=approle.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;secret_id(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault secret id. Only used with auth_type=approle.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;app_id(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault app ID. Only used with auth_type=app-id.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;user_id(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The vault user ID. Only used with auth_type=app-id.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;username(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The username for the userpass authentication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;password(string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The password for the userpass authentication.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_cert(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client cert file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_key(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client key file.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;client_ca_keys(string, optional):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The client CA key file.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;env&lt;/strong&gt; &lt;/summary&gt;
&lt;/details&gt;&lt;/p&gt;

&lt;p&gt;&lt;details&gt;
&lt;summary&gt; &lt;strong&gt;zookeeper&lt;/strong&gt; &lt;/summary&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nodes([]string):&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;List of backend nodes.
&lt;/details&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>plugins</title>
      <link>https://heavyhorst.github.io/remco/plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/plugins/</guid>
      <description>

&lt;h2 id=&#34;env-backend-as-plugin-example&#34;&gt;ENV backend as plugin [Example]&lt;/h2&gt;

&lt;p&gt;This is the env backend as a plugin.
If you want to try it yourself, then
just compile it and move the executable to /etc/remco/plugins.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;context&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/rpc/jsonrpc&amp;quot;

	&amp;quot;github.com/HeavyHorst/easyKV&amp;quot;
	&amp;quot;github.com/HeavyHorst/easyKV/env&amp;quot;
	&amp;quot;github.com/HeavyHorst/remco/backends/plugin&amp;quot;
	&amp;quot;github.com/natefinch/pie&amp;quot;
)

func main() {
	p := pie.NewProvider()
	if err := p.RegisterName(&amp;quot;Plugin&amp;quot;, &amp;amp;EnvRPCServer{}); err != nil {
		log.Fatalf(&amp;quot;failed to register Plugin: %s&amp;quot;, err)
	}
	p.ServeCodec(jsonrpc.NewServerCodec)
}

type EnvRPCServer struct {
	// This is the real implementation
	Impl easyKV.ReadWatcher
}

func (e *EnvRPCServer) Init(args map[string]interface{}, resp *bool) error {
	// use the data in args to create the ReadWatcher
	// env var doesn&#39;t need any data

	var err error
	e.Impl, err = env.New()
	return err
}

func (e *EnvRPCServer) GetValues(args []string, resp *map[string]string) error {
	erg, err := e.Impl.GetValues(args)
	if err != nil {
		return err
	}
	*resp = erg
	return nil
}

func (e *EnvRPCServer) Close(args interface{}, resp *interface{}) error {
	e.Impl.Close()
	return nil
}

func (e EnvRPCServer) WatchPrefix(args plugin.WatchConfig, resp *uint64) error {
	var err error
	*resp, err = e.Impl.WatchPrefix(args.Prefix, context.Background(), easyKV.WithKeys(args.Opts.Keys), easyKV.WithWaitIndex(args.Opts.WaitIndex))
	return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create a config file with this backend section.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[backend]
  [[backend.plugin]]
    path = &amp;quot;/etc/remco/plugins/env&amp;quot;
    keys = [&amp;quot;/&amp;quot;]
    interval = 60
	watch = false
	[backend.plugin.config]
	 # these parameters are not used in the env backend plugin
	 # but other plugins may need some data (password, prefix ...)
	 a = &amp;quot;hallo&amp;quot;
	 b = &amp;quot;moin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;consul-service-plugin-example&#34;&gt;Consul-Service Plugin [Example]&lt;/h2&gt;

&lt;p&gt;Here is another simple example plugin that speaks to the consul service endpoint instead of the consul kv-store like the built in consul backend.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;encoding/json&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/rpc/jsonrpc&amp;quot;
	&amp;quot;path&amp;quot;
	&amp;quot;strconv&amp;quot;

	&amp;quot;github.com/HeavyHorst/easyKV&amp;quot;
	&amp;quot;github.com/HeavyHorst/remco/backends/plugin&amp;quot;
	consul &amp;quot;github.com/hashicorp/consul/api&amp;quot;
	&amp;quot;github.com/natefinch/pie&amp;quot;
)

func NewConsulClient(addr string) (*consul.Client, error) {
	config := consul.DefaultConfig()
	config.Address = addr
	c, err := consul.NewClient(config)
	if err != nil {
		return nil, err
	}
	return c, nil
}

type ConsulRPCServer struct {
	client *consul.Client
}

func main() {
	p := pie.NewProvider()
	if err := p.RegisterName(&amp;quot;Plugin&amp;quot;, &amp;amp;ConsulRPCServer{}); err != nil {
		log.Fatalf(&amp;quot;failed to register Plugin: %s&amp;quot;, err)
	}
	p.ServeCodec(jsonrpc.NewServerCodec)
}

func (c *ConsulRPCServer) Init(args map[string]string, resp *bool) error {
	var err error
	if addr, ok := args[&amp;quot;addr&amp;quot;]; ok {
		c.client, err = NewConsulClient(addr)
		if err != nil {
			return err
		}
		*resp = true
		return nil
	}
	return fmt.Errorf(&amp;quot;I need an Address !&amp;quot;)
}

func (c *ConsulRPCServer) GetValues(args []string, resp *map[string]string) error {
	r := make(map[string]string)
	passingOnly := true
	for _, v := range args {
		addrs, _, err := c.client.Health().Service(v, &amp;quot;&amp;quot;, passingOnly, nil)
		if len(addrs) == 0 &amp;amp;&amp;amp; err == nil {
			log.Printf(&amp;quot;service ( %s ) was not found&amp;quot;, v)
		}
		if err != nil {
			return err
		}

		for idx, addr := range addrs {
			key := path.Join(&amp;quot;/&amp;quot;, &amp;quot;_consul&amp;quot;, &amp;quot;service&amp;quot;, addr.Service.Service, strconv.Itoa(idx))
			service_json, _ := json.Marshal(addr)
			r[key] = string(service_json)
		}
	}
	*resp = r
	return nil
}

func (c *ConsulRPCServer) Close(args interface{}, resp *interface{}) error {
	// consul client doesn&#39;t need to be closed
	return nil
}

func (c *ConsulRPCServer) WatchPrefix(args plugin.WatchConfig, resp *uint64) error {
	return easyKV.ErrWatchNotSupported
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The config backend section could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[backend]
  [[backend.plugin]]
    path = &amp;quot;/etc/remco/plugins/consul-service&amp;quot;
    keys = [&amp;quot;consul&amp;quot;]
    interval = 60
    onetime = false
    [backend.plugin.config]
	 addr = &amp;quot;localhost:8500&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>remco details</title>
      <link>https://heavyhorst.github.io/remco/details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heavyhorst.github.io/remco/details/</guid>
      <description>

&lt;h2 id=&#34;template-resource&#34;&gt;Template resource&lt;/h2&gt;

&lt;p&gt;A template resource in remco consists of the following parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one optional exec command.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;one or many templates.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;one or many backends.&lt;/strong&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note that it is not possible to use the same backend more than once per template resource.
It is for example not possible to use two different redis servers.&lt;/p&gt;

&lt;h2 id=&#34;exec-mode&#34;&gt;Exec mode&lt;/h2&gt;

&lt;p&gt;Remco has the ability to run one arbitary child process per template resource.
When any of the provided templates change and the check command (if any) succeeds, remco will send the configurable reload signal to the child process.
Remco will kill and restart the child process if no reload signal is provided.
Additionally, every signal that remco receives will be forwarded to the child process.&lt;/p&gt;

&lt;p&gt;The template resource will fail if the child process dies. It will be automatically restarted after a random amount of time (0-30s).
This also means that the child needs to remain in the foreground, otherwise the template resource will be restarted endlessly.&lt;/p&gt;

&lt;p&gt;The exec configuration parameters can be found here: &lt;a href=&#34;./config/#exec-configuration-options&#34;&gt;exec configuration&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;commands-reload-check&#34;&gt;Commands (reload &amp;amp; check)&lt;/h2&gt;

&lt;p&gt;Each template can have its own reload and check command. Both commands are executed in a sh-shell which means that operations like environment variable substitution or pipes should work correctly.&lt;/p&gt;

&lt;p&gt;In the check command its additionally possible to reference to the rendered source template with {{ .src }}.&lt;/p&gt;

&lt;p&gt;The check command must exit with status code 0 so that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the reload command runs&lt;/li&gt;
&lt;li&gt;the child process gets reloaded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The template configuration parameters can be found here: &lt;a href=&#34;./config/#template-configuration-options&#34;&gt;template configuration&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;zombie-reaping-pid-1&#34;&gt;Zombie reaping (pid 1)&lt;/h2&gt;

&lt;p&gt;See: &lt;a href=&#34;https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/&#34;&gt;https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If Remco detects that it runs as pid 1 (for example in a Docker container) it will automatically reap zombie processes.
No additional init system is needed.&lt;/p&gt;

&lt;h2 id=&#34;backends&#34;&gt;Backends&lt;/h2&gt;

&lt;p&gt;Remco can fetch configuration data from a bunch of different kv-stores.
Some backends can be configured to watch for changes in the store to immediately react to these changes.
The other way is to provide a backend polling interval.
These two modes are not mutual exclusive, you can watch for changes and run the interval processor as a reconcilation loop.&lt;/p&gt;

&lt;p&gt;Every Backend needs to implement the &lt;a href=&#34;https://github.com/HeavyHorst/easyKV&#34;&gt;easyKV&lt;/a&gt; interface.
This is also the repository where the current implementations live.&lt;/p&gt;

&lt;p&gt;Currently supported are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;etcd 2 and 3&lt;/strong&gt; (interval and watch)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;consul&lt;/strong&gt; (interval and watch)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zookeeper&lt;/strong&gt; (interval and watch)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;redis&lt;/strong&gt; (only interval)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vault&lt;/strong&gt; (only interval)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;environment&lt;/strong&gt; (only interval)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yaml/json files&lt;/strong&gt; (interval and watch)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The different coniguration parameters can be found here: &lt;a href=&#34;./config/#backend-configuration-options&#34;&gt;backend configuration&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;Remco supports backends as plugins.
There is no requirement that plugins be written in Go.
Every language that can provide a JSON-RPC API is ok.&lt;/p&gt;

&lt;p&gt;Example: &lt;a href=&#34;./plugins/&#34;&gt;env plugin&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;running-and-process-lifecycle&#34;&gt;Running and Process Lifecycle&lt;/h2&gt;

&lt;p&gt;Remcos lifecycle can be controlled with several syscalls.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;os.Interrupt(SIGINT on linux) and SIGTERM: remco will gracefully shut down&lt;/li&gt;
&lt;li&gt;SIGHUP: remco will reload all configuration files.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>